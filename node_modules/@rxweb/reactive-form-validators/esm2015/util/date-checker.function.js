import { DateProvider } from "./date-provider";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
function runCondition(leftValue, rightValue, operator) {
    let result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
export function dateChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            let checkDate = dateProvider.getCompareDate(config, control);
            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {
                let currentControlValue = dateProvider.getDate(control.value);
                let isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value, checkDate]);
        }
    }
    return ObjectMaker.null();
}
export function validateDate(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {
                return ObjectMaker.toJson(operationType, config, [control.value]);
            }
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL3V0aWwvZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ3BELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMxRCxTQUFTLFlBQVksQ0FBQyxTQUFlLEVBQUUsVUFBZ0IsRUFBRSxRQUFnQjtJQUNyRSxJQUFJLE1BQU0sR0FBWSxLQUFLLENBQUM7SUFDNUIsUUFBUSxRQUFRLEVBQUU7UUFDZCxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUM7UUFDeEIsS0FBSyxTQUFTLENBQUMsV0FBVztZQUN0QixNQUFNLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQztZQUNoQyxNQUFNO1FBQ1YsS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLGtCQUFrQjtZQUM3QixNQUFNLEdBQUcsU0FBUyxJQUFJLFVBQVUsQ0FBQztZQUNqQyxNQUFNO0tBQ2I7SUFDRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxPQUF3QixFQUFFLE1BQVcsRUFBRSxhQUFxQjtJQUNwRixNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3RDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDM0MsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxJQUFJLFNBQVMsR0FBRyxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUM3RCxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRTtnQkFDbkYsSUFBSSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUQsSUFBSSxPQUFPLEdBQUcsYUFBYSxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxTQUFTLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQTtnQkFDblAsSUFBSSxDQUFDLE9BQU87b0JBQ1IsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUE7YUFDbkY7O2dCQUNHLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFBO1NBQ25GO0tBQ0o7SUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUF3QixFQUFFLE1BQVcsRUFBRSxhQUFxQjtJQUNyRixNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxQyxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3RDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDM0MsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUU7Z0JBQ3JGLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDcEU7U0FDSjtLQUNKO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBEYXRlUHJvdmlkZXIgfSBmcm9tIFwiLi9kYXRlLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gXCIuL2Zvcm0tcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBPUEVSQVRPUlMgfSBmcm9tIFwiLi4vY29uc3Qvb3BlcmF0b3JzLmNvbnN0XCJcclxuaW1wb3J0IHsgZ2V0Q29uZmlnT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmZ1bmN0aW9uIHJ1bkNvbmRpdGlvbihsZWZ0VmFsdWU6IERhdGUsIHJpZ2h0VmFsdWU6IERhdGUsIG9wZXJhdG9yOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGxldCByZXN1bHQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5sZXNzVGhhbjpcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5ncmVhdGVyVGhhbjpcclxuICAgICAgICAgICAgcmVzdWx0ID0gbGVmdFZhbHVlID4gcmlnaHRWYWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBPUEVSQVRPUlMubGVzc1RoYW5FcXVhbFRvOlxyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuRXF1YWxUbzpcclxuICAgICAgICAgICAgcmVzdWx0ID0gbGVmdFZhbHVlID49IHJpZ2h0VmFsdWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVDaGVja2VyKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnksIG9wZXJhdGlvblR5cGU6IHN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZywgY29udHJvbCk7XHJcbiAgICB2YXIgZGF0ZVByb3ZpZGVyID0gbmV3IERhdGVQcm92aWRlcigpO1xyXG4gICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLCBjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgbGV0IGNoZWNrRGF0ZSA9IGRhdGVQcm92aWRlci5nZXRDb21wYXJlRGF0ZShjb25maWcsIGNvbnRyb2wpO1xyXG4gICAgICAgICAgICBpZiAoZGF0ZVByb3ZpZGVyLmlzRGF0ZShjb250cm9sLnZhbHVlKSB8fCBkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlLCBjb25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VycmVudENvbnRyb2xWYWx1ZSA9IGRhdGVQcm92aWRlci5nZXREYXRlKGNvbnRyb2wudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzVmFsaWQgPSBvcGVyYXRpb25UeXBlID09IEFubm90YXRpb25UeXBlcy5taW5EYXRlID8gcnVuQ29uZGl0aW9uKGN1cnJlbnRDb250cm9sVmFsdWUsIGNoZWNrRGF0ZSwgY29uZmlnLm9wZXJhdG9yIHx8IE9QRVJBVE9SUy5ncmVhdGVyVGhhbkVxdWFsVG8pIDogcnVuQ29uZGl0aW9uKGNoZWNrRGF0ZSwgY3VycmVudENvbnRyb2xWYWx1ZSwgY29uZmlnLm9wZXJhdG9yIHx8IE9QRVJBVE9SUy5sZXNzVGhhbkVxdWFsVG8pXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihvcGVyYXRpb25UeXBlLCBjb25maWcsIFtjb250cm9sLnZhbHVlLCBjaGVja0RhdGVdKVxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZSwgY2hlY2tEYXRlXSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVEYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnksIG9wZXJhdGlvblR5cGU6IHN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZywgY29udHJvbCk7XHJcbiAgICB2YXIgZGF0ZVByb3ZpZGVyID0gbmV3IERhdGVQcm92aWRlcigpO1xyXG4gICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLCBjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRlUHJvdmlkZXIuaXNEYXRlKGNvbnRyb2wudmFsdWUpICYmICFkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlLCBjb25maWcpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKG9wZXJhdGlvblR5cGUsIGNvbmZpZywgW2NvbnRyb2wudmFsdWVdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxufSJdfQ==