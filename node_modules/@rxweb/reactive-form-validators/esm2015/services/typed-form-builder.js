import { FormBuilder } from "@angular/forms";
import { RxFormBuilder } from "./rx-form-builder";
import { FUNCTION_STRING } from "../const/app.const";
import { Injectable } from "@angular/core";
export class TypedFormBuilder {
    constructor() {
        this.formBuilder = new FormBuilder();
        this.rxFormBuilder = new RxFormBuilder();
    }
    group(controlsConfig, options) {
        let paramOptions = options || {};
        if (typeof controlsConfig == FUNCTION_STRING)
            return !(paramOptions && paramOptions.isInstance) ? this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config) : this.rxFormBuilder.formGroup(controlsConfig, paramOptions.data, paramOptions.config).modelInstance;
        return this.formBuilder.group(controlsConfig, options);
    }
}
TypedFormBuilder.decorators = [
    { type: Injectable }
];
TypedFormBuilder.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWQtZm9ybS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL3NlcnZpY2VzL3R5cGVkLWZvcm0tYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFxQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFJcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxNQUFNLE9BQU8sZ0JBQWdCO0lBR3pCO1FBQ0ksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsS0FBSyxDQUFJLGNBRVIsRUFBRSxPQUVLO1FBQ0osSUFBSSxZQUFZLEdBQVksT0FBTyxJQUFTLEVBQUUsQ0FBQztRQUMvQyxJQUFJLE9BQU8sY0FBYyxJQUFJLGVBQWU7WUFDeEMsT0FBTyxDQUFDLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBa0IsQ0FBQyxDQUFDLENBQWUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLFlBQVksQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLE1BQU0sQ0FBRSxDQUFDLGFBQWtCLENBQUM7UUFDdlIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBbEJKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBBYnN0cmFjdENvbnRyb2xPcHRpb25zIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IFJ4Rm9ybUJ1aWxkZXIgfSBmcm9tIFwiLi9yeC1mb3JtLWJ1aWxkZXJcIjtcclxuaW1wb3J0IHsgRlVOQ1RJT05fU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0L2FwcC5jb25zdFwiXHJcbmltcG9ydCB7IE9wdGlvbnMgfSBmcm9tIFwiLi4vbW9kZWxzL2ludGVyZmFjZS9vcHRpb25zXCJcclxuaW1wb3J0IHsgUnhGb3JtR3JvdXAgfSBmcm9tIFwiLi9yeC1mb3JtLWdyb3VwXCI7XHJcbmltcG9ydCB7IElGb3JtR3JvdXAgfSBmcm9tIFwiLi4vbW9kZWxzL2ludGVyZmFjZS9pLWZvcm0tZ3JvdXBcIjtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFR5cGVkRm9ybUJ1aWxkZXIge1xyXG4gICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXI7XHJcbiAgICBwcml2YXRlIHJ4Rm9ybUJ1aWxkZXI6IFJ4Rm9ybUJ1aWxkZXI7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmZvcm1CdWlsZGVyID0gbmV3IEZvcm1CdWlsZGVyKCk7XHJcbiAgICAgICAgdGhpcy5yeEZvcm1CdWlsZGVyID0gbmV3IFJ4Rm9ybUJ1aWxkZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBncm91cDxUPihjb250cm9sc0NvbmZpZzoge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIH0sIG9wdGlvbnM/OiBBYnN0cmFjdENvbnRyb2xPcHRpb25zIHwge1xyXG4gICAgICAgIFtrZXk6IHN0cmluZ106IGFueTtcclxuICAgIH0gfCBudWxsKTogRm9ybUdyb3VwIHwgVCB7XHJcbiAgICAgICAgbGV0IHBhcmFtT3B0aW9ucyA9IDxPcHRpb25zPm9wdGlvbnMgfHwgPGFueT57fTtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRyb2xzQ29uZmlnID09IEZVTkNUSU9OX1NUUklORylcclxuICAgICAgICAgICAgcmV0dXJuICEocGFyYW1PcHRpb25zICYmIHBhcmFtT3B0aW9ucy5pc0luc3RhbmNlKSA/IHRoaXMucnhGb3JtQnVpbGRlci5mb3JtR3JvdXAoY29udHJvbHNDb25maWcsIHBhcmFtT3B0aW9ucy5kYXRhLCBwYXJhbU9wdGlvbnMuY29uZmlnKSBhcyBJRm9ybUdyb3VwPFQ+IDogKDxSeEZvcm1Hcm91cD50aGlzLnJ4Rm9ybUJ1aWxkZXIuZm9ybUdyb3VwKGNvbnRyb2xzQ29uZmlnLCBwYXJhbU9wdGlvbnMuZGF0YSwgcGFyYW1PcHRpb25zLmNvbmZpZykpLm1vZGVsSW5zdGFuY2UgYXMgVDtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtQnVpbGRlci5ncm91cChjb250cm9sc0NvbmZpZyxvcHRpb25zKTtcclxuICAgIH1cclxufSJdfQ==