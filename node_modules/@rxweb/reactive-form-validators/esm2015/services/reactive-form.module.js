import { NgModule } from "@angular/core";
import { CommonModule, DecimalPipe } from "@angular/common";
import { FormsModule, ReactiveFormsModule, FormBuilder } from "@angular/forms";
import { RxFormBuilder } from "./rx-form-builder";
import { RxwebFormDirective } from "../directives/rx-form.directive";
import { DecimalProvider } from "../domain/element-processor/decimal.provider";
import { HtmlControlTemplateDirective } from '../directives/html-control-template.directive';
import { ControlHostDirective } from '../directives/control-host.directive';
import { RxFormControlDirective } from "../directives/template-validations/rxformcontrol.directive";
import { FileControlDirective } from "../directives/template-validations/file-control.directive";
import { ImageFileControlDirective } from "../directives/template-validations/image-file-control.directive";
import { AsyncValidationDirective } from "../directives/template-validations/async-validation.directive";
import { defaultContainer } from "../core/defaultContainer";
import { TypedFormBuilder } from "./typed-form-builder";
import { ReactiveFormConfig } from "../util/reactive-form-config";
export class RxReactiveFormsModule {
    static forRoot() { return { ngModule: RxReactiveFormsModule, providers: [] }; }
}
RxReactiveFormsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],
                imports: [CommonModule, FormsModule, ReactiveFormsModule],
                providers: [RxFormBuilder, DecimalProvider, DecimalPipe],
                exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]
            },] }
];
// Experimental
export class ReactiveTypedFormsModule {
    constructor() {
        defaultContainer.isExperimental = true;
        ReactiveFormConfig.autoInstancePush = true;
    }
    static forRoot() { return { ngModule: ReactiveTypedFormsModule, providers: [] }; }
}
ReactiveTypedFormsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],
                providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder],
                exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]
            },] }
];
ReactiveTypedFormsModule.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmUtZm9ybS5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvc2VydmljZXMvcmVhY3RpdmUtZm9ybS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOENBQThDLENBQUE7QUFDOUUsT0FBTyxFQUFFLDRCQUE0QixFQUFDLE1BQU0sK0NBQStDLENBQUE7QUFDM0YsT0FBTyxFQUFFLG9CQUFvQixFQUFDLE1BQU0sc0NBQXNDLENBQUE7QUFDMUUsT0FBTyxFQUFDLHNCQUFzQixFQUFHLE1BQU0sNERBQTRELENBQUE7QUFDbkcsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sMkRBQTJELENBQUE7QUFDL0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUVBQWlFLENBQUE7QUFDM0csT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0RBQStELENBQUE7QUFDeEcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUE7QUFPakUsTUFBTSxPQUFPLHFCQUFxQjtJQUM5QixNQUFNLENBQUMsT0FBTyxLQUFpRCxPQUFPLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7OztZQVA5SCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsNEJBQTRCLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUseUJBQXlCLEVBQUUsd0JBQXdCLENBQUc7Z0JBQzNMLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBQyxXQUFXLEVBQUUsbUJBQW1CLENBQUM7Z0JBQ3hELFNBQVMsRUFBRSxDQUFDLGFBQWEsRUFBQyxlQUFlLEVBQUUsV0FBVyxDQUFDO2dCQUN2RCxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsRUFBQyxrQkFBa0IsRUFBQyw0QkFBNEIsRUFBQyxzQkFBc0IsRUFBQyxvQkFBb0IsRUFBRSx5QkFBeUIsQ0FBRTthQUM5Sjs7QUFLRCxlQUFlO0FBT2YsTUFBTSxPQUFPLHdCQUF3QjtJQUNqQztRQUNJLGdCQUFnQixDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDdkMsa0JBQWtCLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0lBQy9DLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxLQUFvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7OztZQVhwSSxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLEVBQUU7Z0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQzFGLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQztnQkFDbkYsT0FBTyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixDQUFDO2FBQ25FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIERlY2ltYWxQaXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBGb3JtQnVpbGRlciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBSeEZvcm1CdWlsZGVyIH0gZnJvbSBcIi4vcngtZm9ybS1idWlsZGVyXCI7XHJcbmltcG9ydCB7IFJ4d2ViRm9ybURpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3J4LWZvcm0uZGlyZWN0aXZlXCI7XHJcbmltcG9ydCB7IERlY2ltYWxQcm92aWRlciB9IGZyb20gXCIuLi9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvZGVjaW1hbC5wcm92aWRlclwiXHJcbmltcG9ydCB7IEh0bWxDb250cm9sVGVtcGxhdGVEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvaHRtbC1jb250cm9sLXRlbXBsYXRlLmRpcmVjdGl2ZSdcclxuaW1wb3J0IHsgQ29udHJvbEhvc3REaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvY29udHJvbC1ob3N0LmRpcmVjdGl2ZSdcclxuaW1wb3J0IHtSeEZvcm1Db250cm9sRGlyZWN0aXZlICB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL3J4Zm9ybWNvbnRyb2wuZGlyZWN0aXZlXCJcclxuaW1wb3J0IHtGaWxlQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ZpbGUtY29udHJvbC5kaXJlY3RpdmVcIlxyXG5pbXBvcnQgeyBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvdGVtcGxhdGUtdmFsaWRhdGlvbnMvaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZVwiXHJcbmltcG9ydCB7IEFzeW5jVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2FzeW5jLXZhbGlkYXRpb24uZGlyZWN0aXZlXCJcclxuaW1wb3J0IHsgZGVmYXVsdENvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL2RlZmF1bHRDb250YWluZXJcIjtcclxuaW1wb3J0IHsgVHlwZWRGb3JtQnVpbGRlciB9IGZyb20gXCIuL3R5cGVkLWZvcm0tYnVpbGRlclwiO1xyXG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1Db25maWcgfSBmcm9tIFwiLi4vdXRpbC9yZWFjdGl2ZS1mb3JtLWNvbmZpZ1wiXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtSeHdlYkZvcm1EaXJlY3RpdmUsIEh0bWxDb250cm9sVGVtcGxhdGVEaXJlY3RpdmUsIENvbnRyb2xIb3N0RGlyZWN0aXZlLCBSeEZvcm1Db250cm9sRGlyZWN0aXZlLCBGaWxlQ29udHJvbERpcmVjdGl2ZSwgSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSwgQXN5bmNWYWxpZGF0aW9uRGlyZWN0aXZlICBdLFxyXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSxGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZV0sXHJcbiAgICBwcm92aWRlcnM6IFtSeEZvcm1CdWlsZGVyLERlY2ltYWxQcm92aWRlciwgRGVjaW1hbFBpcGVdLFxyXG4gICAgZXhwb3J0czogW0FzeW5jVmFsaWRhdGlvbkRpcmVjdGl2ZSxSeHdlYkZvcm1EaXJlY3RpdmUsSHRtbENvbnRyb2xUZW1wbGF0ZURpcmVjdGl2ZSxSeEZvcm1Db250cm9sRGlyZWN0aXZlLEZpbGVDb250cm9sRGlyZWN0aXZlICxJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFJ4UmVhY3RpdmVGb3Jtc01vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJ4UmVhY3RpdmVGb3Jtc01vZHVsZT4geyByZXR1cm4geyBuZ01vZHVsZTogUnhSZWFjdGl2ZUZvcm1zTW9kdWxlLCBwcm92aWRlcnM6IFtdIH07IH1cclxufVxyXG5cclxuLy8gRXhwZXJpbWVudGFsXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtdLFxyXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUsIFJ4UmVhY3RpdmVGb3Jtc01vZHVsZS5mb3JSb290KCldLFxyXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBGb3JtQnVpbGRlciwgdXNlQ2xhc3M6IFR5cGVkRm9ybUJ1aWxkZXIgfSwgVHlwZWRGb3JtQnVpbGRlcl0sXHJcbiAgICBleHBvcnRzOiBbUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZWFjdGl2ZVR5cGVkRm9ybXNNb2R1bGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgZGVmYXVsdENvbnRhaW5lci5pc0V4cGVyaW1lbnRhbCA9IHRydWU7XHJcbiAgICAgICAgUmVhY3RpdmVGb3JtQ29uZmlnLmF1dG9JbnN0YW5jZVB1c2ggPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxSZWFjdGl2ZVR5cGVkRm9ybXNNb2R1bGU+IHsgcmV0dXJuIHsgbmdNb2R1bGU6IFJlYWN0aXZlVHlwZWRGb3Jtc01vZHVsZSwgcHJvdmlkZXJzOiBbXSB9OyB9XHJcbn1cclxuIl19