import { Input, Directive } from "@angular/core";
import { defaultContainer } from "../core/defaultContainer";
import { OBJECT_PROPERTY, PROPERTY } from "../const";
import { ApplicationUtil } from "../util/app-util";
import { TEMPLATE_VALIDATION_CONFIG } from '../const/app.const';
export class BaseDirective {
    applyValidations(controls, model = null) {
        if (this.model) {
            let modelConfig = defaultContainer.get(model || this.model.constructor);
            if (modelConfig) {
                modelConfig.properties.forEach(property => {
                    if (controls[property.name]) {
                        switch (property.propertyType) {
                            case PROPERTY:
                                this.setValidatorConfig(controls[property.name], modelConfig, property);
                                break;
                            case OBJECT_PROPERTY:
                                this.applyValidations(controls[property.name].controls, property.entity);
                                break;
                        }
                    }
                });
            }
        }
    }
    setValidatorConfig(control, modelConfig, property) {
        let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);
        annotations.forEach(annotation => {
            if (!control[TEMPLATE_VALIDATION_CONFIG])
                control[TEMPLATE_VALIDATION_CONFIG] = {};
            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : "", annotation.annotationType);
        });
    }
}
BaseDirective.decorators = [
    { type: Directive }
];
BaseDirective.propDecorators = {
    model: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvZGlyZWN0aXZlcy9iYXNlLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUMxRCxPQUFPLEVBQUcsZUFBZSxFQUFFLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQTtBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDBCQUEwQixFQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFFaEUsTUFBTSxPQUFnQixhQUFhO0lBRy9CLGdCQUFnQixDQUFDLFFBQVksRUFBQyxRQUFZLElBQUk7UUFDMUMsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFDO1lBQ1YsSUFBSSxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3hFLElBQUcsV0FBVyxFQUFDO2dCQUNYLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN0QyxJQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUM7d0JBQzNCLFFBQU8sUUFBUSxDQUFDLFlBQVksRUFBRTs0QkFDMUIsS0FBSyxRQUFRO2dDQUNULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLFdBQVcsRUFBQyxRQUFRLENBQUMsQ0FBQztnQ0FDMUUsTUFBTTs0QkFDTixLQUFLLGVBQWU7Z0NBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0NBQzVFLE1BQU07eUJBQ1Q7cUJBQ0o7Z0JBQ0QsQ0FBQyxDQUFDLENBQUE7YUFDTDtTQUNKO0lBQ0wsQ0FBQztJQUVPLGtCQUFrQixDQUFDLE9BQXVCLEVBQUMsV0FBNkIsRUFBQyxRQUFxQjtRQUNsRyxJQUFJLFdBQVcsR0FBRSxXQUFXLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixJQUFHLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDO2dCQUN2QyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDekMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3BILENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQzs7O1lBL0JKLFNBQVM7OztvQkFFTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiXHJcbmltcG9ydCB7ZGVmYXVsdENvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL2RlZmF1bHRDb250YWluZXJcIlxyXG5pbXBvcnQgeyAgT0JKRUNUX1BST1BFUlRZLCBQUk9QRVJUWX0gZnJvbSBcIi4uL2NvbnN0XCJcclxuaW1wb3J0IHsgIEluc3RhbmNlQ29udGFpbmVyLCBQcm9wZXJ0eUluZm8gfSBmcm9tICcuLi9jb3JlL3ZhbGlkYXRvci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tIFwiLi4vdXRpbC9hcHAtdXRpbFwiO1xyXG5pbXBvcnQgeyBURU1QTEFURV9WQUxJREFUSU9OX0NPTkZJRyAgfSBmcm9tICcuLi9jb25zdC9hcHAuY29uc3QnXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZURpcmVjdGl2ZSB7XHJcbiAgICBASW5wdXQoKSBtb2RlbDphbnk7XHJcbiAgICBcclxuICAgIGFwcGx5VmFsaWRhdGlvbnMoY29udHJvbHM6YW55LG1vZGVsOmFueSA9IG51bGwpe1xyXG4gICAgICAgIGlmKHRoaXMubW9kZWwpe1xyXG4gICAgICAgICAgICBsZXQgbW9kZWxDb25maWcgPSBkZWZhdWx0Q29udGFpbmVyLmdldChtb2RlbCB8fCB0aGlzLm1vZGVsLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgaWYobW9kZWxDb25maWcpe1xyXG4gICAgICAgICAgICAgICAgbW9kZWxDb25maWcucHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNvbnRyb2xzW3Byb3BlcnR5Lm5hbWVdKXtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2gocHJvcGVydHkucHJvcGVydHlUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgUFJPUEVSVFk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZhbGlkYXRvckNvbmZpZyhjb250cm9sc1twcm9wZXJ0eS5uYW1lXSxtb2RlbENvbmZpZyxwcm9wZXJ0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIE9CSkVDVF9QUk9QRVJUWTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwbHlWYWxpZGF0aW9ucyhjb250cm9sc1twcm9wZXJ0eS5uYW1lXS5jb250cm9scyxwcm9wZXJ0eS5lbnRpdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0VmFsaWRhdG9yQ29uZmlnKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLG1vZGVsQ29uZmlnOkluc3RhbmNlQ29udGFpbmVyLHByb3BlcnR5OlByb3BlcnR5SW5mbyl7XHJcbiAgICAgICAgbGV0IGFubm90YXRpb25zPSBtb2RlbENvbmZpZy5wcm9wZXJ0eUFubm90YXRpb25zLmZpbHRlcih0PT4gdC5wcm9wZXJ0eU5hbWUgPT0gcHJvcGVydHkubmFtZSk7XHJcbiAgICAgICAgYW5ub3RhdGlvbnMuZm9yRWFjaChhbm5vdGF0aW9uID0+e1xyXG4gICAgICAgICAgICBpZighY29udHJvbFtURU1QTEFURV9WQUxJREFUSU9OX0NPTkZJR10pXHJcbiAgICAgICAgICAgIGNvbnRyb2xbVEVNUExBVEVfVkFMSURBVElPTl9DT05GSUddID0ge307XHJcbiAgICAgICAgICAgIEFwcGxpY2F0aW9uVXRpbC5jb25maWd1cmVDb250cm9sKGNvbnRyb2wsIGFubm90YXRpb24uY29uZmlnID8gYW5ub3RhdGlvbi5jb25maWcgOiBcIlwiLCBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlKVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIl19