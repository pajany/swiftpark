import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
const FILE_VALIDATOR_NAMES = ["extension", "fileSize", "file"];
export class FileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.validators = [];
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.element = elementRef.nativeElement;
    }
    onChangeCall(element) {
        let files = element.files;
        if (this.writeFile)
            this.onChange(files);
        else {
            if (files.length > 0)
                this.onChange(element.value);
            else
                this.onChange(undefined);
        }
    }
    writeValue(value) { }
    registerOnChange(invocation) { this.onChange = invocation; }
    registerOnTouched(invocation) { this.onTouched = invocation; }
    set extension(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);
    }
    set fileSize(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);
    }
    set file(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);
    }
    setConfig(control) {
        FILE_VALIDATOR_NAMES.forEach(t => {
            if (!this[t] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][t])
                this[t] = control[VALIDATOR_CONFIG][t];
        });
        this.isProcessed = true;
    }
    pushValidator(validatorName, config) {
        if (config)
            this.validators.push(APP_VALIDATORS[validatorName](config));
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        var result = null;
        for (var validator of this.validators) {
            result = validator(control, this.element.files);
            if (result)
                break;
        }
        return result;
    }
}
FileControlDirective.decorators = [
    { type: Directive, args: [{
                selector: "input[type=file]",
                host: {
                    "(change)": "onChangeCall($event.target)",
                    "(blur)": "onTouched()"
                },
                providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective, multi: true }, {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => FileControlDirective),
                        multi: true
                    }]
            },] }
];
FileControlDirective.ctorParameters = () => [
    { type: ElementRef }
];
FileControlDirective.propDecorators = {
    writeFile: [{ type: Input }],
    extension: [{ type: Input }],
    fileSize: [{ type: Input }],
    file: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RSxPQUFPLEVBQW1CLGFBQWEsRUFBYSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTlGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUNsRSxNQUFNLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO0FBQzNDLE1BQU0sb0JBQW9CLEdBQWEsQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBYXpFLE1BQU0sT0FBTyxvQkFBb0I7SUF1QzdCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFwQzFDLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBR3JCLGVBQVUsR0FBZSxFQUFFLENBQUM7UUFFcEMsYUFBUSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEIsY0FBUyxHQUFHLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQStCbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUMsYUFBcUIsQ0FBQztJQUNwRCxDQUFDO0lBOUJELFlBQVksQ0FBQyxPQUF5QjtRQUNsQyxJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksSUFBSSxDQUFDLFNBQVM7WUFDZCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3BCO1lBQ0QsSUFBSSxLQUFL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cmRSZWYsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBOR19WQUxJREFUT1JTLCBWYWxpZGF0b3IsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBFeHRlbnNpb25Db25maWcsIFNpemVDb25maWcsIEZpbGVDb25maWcgfSBmcm9tICcuLi8uLi9tb2RlbHMvY29uZmlnJ1xyXG5pbXBvcnQgeyBBUFBfVkFMSURBVE9SUyB9IGZyb20gXCIuLi8uLi9jb25zdC9hcHAtdmFsaWRhdG9ycy5jb25zdFwiO1xyXG5jb25zdCBWQUxJREFUT1JfQ09ORklHID0gXCJ2YWxpZGF0b3JDb25maWdcIjtcclxuY29uc3QgRklMRV9WQUxJREFUT1JfTkFNRVM6IHN0cmluZ1tdID0gW1wiZXh0ZW5zaW9uXCIsIFwiZmlsZVNpemVcIiwgXCJmaWxlXCJdO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcImlucHV0W3R5cGU9ZmlsZV1cIixcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICBcIihjaGFuZ2UpXCI6IFwib25DaGFuZ2VDYWxsKCRldmVudC50YXJnZXQpXCIsXHJcbiAgICAgICAgXCIoYmx1cilcIjogXCJvblRvdWNoZWQoKVwiXHJcbiAgICB9LFxyXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUiwgdXNlRXhpc3Rpbmc6IEZpbGVDb250cm9sRGlyZWN0aXZlLCBtdWx0aTogdHJ1ZSB9LCB7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBGaWxlQ29udHJvbERpcmVjdGl2ZSksXHJcbiAgICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlQ29udHJvbERpcmVjdGl2ZSBpbXBsZW1lbnRzIFZhbGlkYXRvciB7XHJcbiAgICBmaWxlczogYW55O1xyXG4gICAgZWxlbWVudDogYW55XHJcbiAgICBpc1Byb2Nlc3NlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgXHJcblxyXG4gICAgcHJpdmF0ZSB2YWxpZGF0b3JzOiBGdW5jdGlvbltdID0gW107XHJcblxyXG4gICAgb25DaGFuZ2UgPSAoXykgPT4geyB9O1xyXG4gICAgb25Ub3VjaGVkID0gKCkgPT4geyB9O1xyXG5cclxuICAgIG9uQ2hhbmdlQ2FsbChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSB7XHJcbiAgICAgICAgbGV0IGZpbGVzID0gZWxlbWVudC5maWxlcztcclxuICAgICAgICBpZiAodGhpcy53cml0ZUZpbGUpXHJcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoZmlsZXMpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UoZWxlbWVudC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRoaXMub25DaGFuZ2UodW5kZWZpbmVkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZSkgeyB9XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGludm9jYXRpb246IGFueSkgeyB0aGlzLm9uQ2hhbmdlID0gaW52b2NhdGlvbjsgfVxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoaW52b2NhdGlvbjogYW55KSB7IHRoaXMub25Ub3VjaGVkID0gaW52b2NhdGlvbjsgfVxyXG5cclxuICAgIEBJbnB1dCgpIHdyaXRlRmlsZTogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIHNldCBleHRlbnNpb24oY29uZmlnOiBFeHRlbnNpb25Db25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMF0sIGNvbmZpZylcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNldCBmaWxlU2l6ZShjb25maWc6IFNpemVDb25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMV0sIGNvbmZpZylcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBzZXQgZmlsZShjb25maWc6IEZpbGVDb25maWcpIHtcclxuICAgICAgICB0aGlzLnB1c2hWYWxpZGF0b3IoRklMRV9WQUxJREFUT1JfTkFNRVNbMl0sIGNvbmZpZylcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb25maWcoY29udHJvbDogQWJzdHJhY3RDb250cm9sKSB7XHJcbiAgICAgICAgRklMRV9WQUxJREFUT1JfTkFNRVMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzW3RdICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR10gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXVt0XSlcclxuICAgICAgICAgICAgICAgIHRoaXNbdF0gPSBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW3RdO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5pc1Byb2Nlc3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVzaFZhbGlkYXRvcih2YWxpZGF0b3JOYW1lOiBzdHJpbmcsIGNvbmZpZzogRXh0ZW5zaW9uQ29uZmlnIHwgU2l6ZUNvbmZpZyB8IEZpbGVDb25maWcpIHtcclxuICAgICAgICBpZiAoY29uZmlnKVxyXG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRvcnMucHVzaChBUFBfVkFMSURBVE9SU1t2YWxpZGF0b3JOYW1lXShjb25maWcpKVxyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1Byb2Nlc3NlZClcclxuICAgICAgICAgICAgdGhpcy5zZXRDb25maWcoY29udHJvbCk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgZm9yICh2YXIgdmFsaWRhdG9yIG9mIHRoaXMudmFsaWRhdG9ycykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB2YWxpZGF0b3IoY29udHJvbCwgdGhpcy5lbGVtZW50LmZpbGVzKTtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcbn1cclxuIl19