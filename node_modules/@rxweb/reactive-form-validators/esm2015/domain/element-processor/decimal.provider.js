import { Injectable, Inject, LOCALE_ID } from "@angular/core";
import { getLocaleNumberSymbol, NumberSymbol } from "@angular/common";
import { DecimalPipe } from "@angular/common";
import { RegexValidator } from '../../util/regex-validator';
import { BLANK } from "../../const";
import { ReactiveFormConfig } from "../../util/reactive-form-config";
export class DecimalProvider {
    constructor(decimalPipe, localeId) {
        this.decimalPipe = decimalPipe;
        this.localeId = localeId;
        this.decimalSeperator = ".";
        this.groupSeperator = ",";
        this.isSetConfig = false;
        this.decimalSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Decimal);
        ;
        this.groupSeperator = getLocaleNumberSymbol(localeId, NumberSymbol.Group);
        this.setSymbolInConfig();
    }
    replacer(value) {
        value = String(value);
        if (!this.isSetConfig)
            this.bindConfig();
        value = value.split(this.groupSeperator).join(BLANK);
        if (this.allowDecimalSymbol)
            value = value.replace(this.decimalSeperator, this.allowDecimalSymbol);
        var splitValue = value.split(this.decimalSeperator);
        value = (splitValue.length > 1 && splitValue[1] && RegexValidator.isZero(splitValue[1])) ? splitValue[0] : value;
        return value;
    }
    transFormDecimal(value, digitsInfo) {
        value = String(value);
        if (!value) {
            return value;
        }
        return this.decimalPipe.transform(value.replace(ReactiveFormConfig.number.groupSymbol, "").replace(this.decimalSeperator, "."), digitsInfo, this.localeId);
    }
    setSymbolInConfig() {
        ReactiveFormConfig.number = { decimalSymbol: this.decimalSeperator, groupSymbol: this.groupSeperator };
    }
    bindConfig() {
        if (ReactiveFormConfig.json) {
            if (ReactiveFormConfig.json.localeId)
                this.localeId = ReactiveFormConfig.json.localeId;
            if (ReactiveFormConfig.json.allowDecimalSymbol)
                this.allowDecimalSymbol = ReactiveFormConfig.json.allowDecimalSymbol;
        }
        this.isSetConfig = true;
    }
}
DecimalProvider.decorators = [
    { type: Injectable }
];
DecimalProvider.ctorParameters = () => [
    { type: DecimalPipe },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbC5wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvZGVjaW1hbC5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ3JFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUlyRSxNQUFNLE9BQU8sZUFBZTtJQUl4QixZQUNZLFdBQXdCLEVBQTZCLFFBQWdCO1FBQXJFLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQTZCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFKekUscUJBQWdCLEdBQVcsR0FBRyxDQUFDO1FBQy9CLG1CQUFjLEdBQVcsR0FBRyxDQUFDO1FBNEM3QixnQkFBVyxHQUFZLEtBQUssQ0FBQztRQXZDakMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFBQSxDQUFDO1FBQy9FLElBQUksQ0FBQyxjQUFjLEdBQUcscUJBQXFCLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxRSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQVU7UUFDZixLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVztZQUNqQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyRCxJQUFJLElBQUksQ0FBQyxrQkFBa0I7WUFDdkIsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3pFLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEQsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakgsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQVUsRUFBRSxVQUFrQjtRQUMzQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqSyxDQUFDO0lBRU8saUJBQWlCO1FBQ3JCLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMzRyxDQUFDO0lBRUQsVUFBVTtRQUNOLElBQUksa0JBQWtCLENBQUMsSUFBSSxFQUFFO1lBQ3pCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVE7Z0JBQ2hDLElBQUksQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNyRCxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxrQkFBa0I7Z0JBQzFDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7U0FDNUU7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztJQUM1QixDQUFDOzs7WUE3Q0osVUFBVTs7O1lBTkYsV0FBVzt5Q0FZdUIsTUFBTSxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIExPQ0FMRV9JRCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCJcclxuaW1wb3J0IHsgZ2V0TG9jYWxlTnVtYmVyU3ltYm9sLCBOdW1iZXJTeW1ib2wgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCJcclxuaW1wb3J0IHsgRGVjaW1hbFBpcGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCJcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tICcuLi8uLi91dGlsL3JlZ2V4LXZhbGlkYXRvcic7XHJcbmltcG9ydCB7IEJMQU5LIH0gZnJvbSBcIi4uLy4uL2NvbnN0XCJcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3JtQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3V0aWwvcmVhY3RpdmUtZm9ybS1jb25maWdcIjtcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZWNpbWFsUHJvdmlkZXIge1xyXG4gICAgcHJpdmF0ZSBkZWNpbWFsU2VwZXJhdG9yOiBzdHJpbmcgPSBcIi5cIjtcclxuICAgIHByaXZhdGUgZ3JvdXBTZXBlcmF0b3I6IHN0cmluZyA9IFwiLFwiO1xyXG4gICAgcHJpdmF0ZSBhbGxvd0RlY2ltYWxTeW1ib2w6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgZGVjaW1hbFBpcGU6IERlY2ltYWxQaXBlLCBASW5qZWN0KExPQ0FMRV9JRCkgcHJpdmF0ZSBsb2NhbGVJZDogc3RyaW5nXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmRlY2ltYWxTZXBlcmF0b3IgPSBnZXRMb2NhbGVOdW1iZXJTeW1ib2wobG9jYWxlSWQsIE51bWJlclN5bWJvbC5EZWNpbWFsKTs7XHJcbiAgICAgICAgdGhpcy5ncm91cFNlcGVyYXRvciA9IGdldExvY2FsZU51bWJlclN5bWJvbChsb2NhbGVJZCwgTnVtYmVyU3ltYm9sLkdyb3VwKTtcclxuICAgICAgICB0aGlzLnNldFN5bWJvbEluQ29uZmlnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVwbGFjZXIodmFsdWU6IGFueSk6IGFueSB7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc1NldENvbmZpZylcclxuICAgICAgICAgICAgdGhpcy5iaW5kQ29uZmlnKCk7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zcGxpdCh0aGlzLmdyb3VwU2VwZXJhdG9yKS5qb2luKEJMQU5LKTtcclxuICAgICAgICBpZiAodGhpcy5hbGxvd0RlY2ltYWxTeW1ib2wpXHJcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSh0aGlzLmRlY2ltYWxTZXBlcmF0b3IsIHRoaXMuYWxsb3dEZWNpbWFsU3ltYm9sKVxyXG4gICAgICAgIHZhciBzcGxpdFZhbHVlID0gdmFsdWUuc3BsaXQodGhpcy5kZWNpbWFsU2VwZXJhdG9yKTtcclxuICAgICAgICB2YWx1ZSA9IChzcGxpdFZhbHVlLmxlbmd0aCA+IDEgJiYgc3BsaXRWYWx1ZVsxXSAmJiBSZWdleFZhbGlkYXRvci5pc1plcm8oc3BsaXRWYWx1ZVsxXSkpID8gc3BsaXRWYWx1ZVswXSA6IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc0Zvcm1EZWNpbWFsKHZhbHVlOiBhbnksIGRpZ2l0c0luZm86IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgdmFsdWUgPSBTdHJpbmcodmFsdWUpO1xyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5kZWNpbWFsUGlwZS50cmFuc2Zvcm0odmFsdWUucmVwbGFjZShSZWFjdGl2ZUZvcm1Db25maWcubnVtYmVyLmdyb3VwU3ltYm9sLCAgIFwiXCIpLnJlcGxhY2UodGhpcy5kZWNpbWFsU2VwZXJhdG9yLCBcIi5cIiksIGRpZ2l0c0luZm8sIHRoaXMubG9jYWxlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0U3ltYm9sSW5Db25maWcoKSB7XHJcbiAgICAgICAgUmVhY3RpdmVGb3JtQ29uZmlnLm51bWJlciA9IHsgZGVjaW1hbFN5bWJvbDogdGhpcy5kZWNpbWFsU2VwZXJhdG9yLCBncm91cFN5bWJvbDogdGhpcy5ncm91cFNlcGVyYXRvciB9O1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRDb25maWcoKSB7XHJcbiAgICAgICAgaWYgKFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uKSB7XHJcbiAgICAgICAgICAgIGlmIChSZWFjdGl2ZUZvcm1Db25maWcuanNvbi5sb2NhbGVJZClcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlSWQgPSBSZWFjdGl2ZUZvcm1Db25maWcuanNvbi5sb2NhbGVJZDtcclxuICAgICAgICAgICAgaWYgKFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmFsbG93RGVjaW1hbFN5bWJvbClcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsb3dEZWNpbWFsU3ltYm9sID0gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uYWxsb3dEZWNpbWFsU3ltYm9sO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlzU2V0Q29uZmlnID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzU2V0Q29uZmlnOiBib29sZWFuID0gZmFsc2U7XHJcbn1cclxuIl19